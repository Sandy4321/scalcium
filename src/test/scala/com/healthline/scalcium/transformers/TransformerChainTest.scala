package com.healthline.scalcium.transformers

import org.junit.Test
import com.healthline.util.Config
import org.junit.Test

class TransformerChainTest {

  @Test def testTransform(): Unit = {
    Config.setConfigDir("/prod/web/config")
    val docBody = """
Typically, randomization software should allow users to exert control over the different aspects of randomization including block design, provision of unique identifiers and control over the format and type of program output. While some of these characteristics have been addressed by available software, none of them have all of these capabilities integrated into one package. The main objective of the Random Allocation Software project was to enhance the user's control over different aspects of randomization in parallel group trials, including output type and format, structure and ordering of generated unique identifiers and enabling users to specify group names for more than two groups.

The program has different settings for: simple and blocked randomizations; length, format and ordering of generated unique identifiers; type and format of program output; and saving sessions for future use. A formatted random list generated by this program can be used directly (without further formatting) by the coordinator of the research team to prepare and encode different drugs or instruments necessary for the parallel group trial.

Random Allocation Software enables users to control different attributes of the random allocation sequence and produce qualified lists for parallel group trials.
      """
    val doc = Doc("els", null, null, docBody, null, null, null, null, null, null, null, null)
    val chain = new TransformerChain()
    val odoc = chain.transform(doc)
    Console.println(odoc)
  }
}